Index: src/Entity/Wish.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Entity/Wish.php b/src/Entity/Wish.php
new file mode 100644
--- /dev/null	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
+++ b/src/Entity/Wish.php	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
@@ -0,0 +1,109 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\WishRepository;
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ORM\Entity(repositoryClass=WishRepository::class)
+ */
+class Wish
+{
+    /**
+     * @ORM\Id
+     * @ORM\GeneratedValue
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\Column(type="string", length=255)
+     */
+    private $title;
+
+    /**
+     * @ORM\Column(type="text", nullable=true)
+     */
+    private $description;
+
+    /**
+     * @ORM\Column(type="string", length=50)
+     */
+    private $author;
+
+    /**
+     * @ORM\Column(type="boolean")
+     */
+    private $isPublished;
+
+    /**
+     * @ORM\Column(type="date", nullable=true)
+     */
+    private $dateCreated;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getTitle(): ?string
+    {
+        return $this->title;
+    }
+
+    public function setTitle(string $title): self
+    {
+        $this->title = $title;
+
+        return $this;
+    }
+
+    public function getDescription(): ?string
+    {
+        return $this->description;
+    }
+
+    public function setDescription(?string $description): self
+    {
+        $this->description = $description;
+
+        return $this;
+    }
+
+    public function getAuthor(): ?string
+    {
+        return $this->author;
+    }
+
+    public function setAuthor(string $author): self
+    {
+        $this->author = $author;
+
+        return $this;
+    }
+
+    public function isIsPublished(): ?bool
+    {
+        return $this->isPublished;
+    }
+
+    public function setIsPublished(bool $isPublished): self
+    {
+        $this->isPublished = $isPublished;
+
+        return $this;
+    }
+
+    public function getDateCreated(): ?\DateTimeInterface
+    {
+        return $this->dateCreated;
+    }
+
+    public function setDateCreated(?\DateTimeInterface $dateCreated): self
+    {
+        $this->dateCreated = $dateCreated;
+
+        return $this;
+    }
+}
Index: src/Form/WishType.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Form/WishType.php b/src/Form/WishType.php
new file mode 100644
--- /dev/null	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
+++ b/src/Form/WishType.php	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
@@ -0,0 +1,46 @@
+<?php
+
+namespace App\Form;
+
+use App\Entity\Wish;
+use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
+use Symfony\Component\Form\Extension\Core\Type\DateType;
+use Symfony\Component\Form\Extension\Core\Type\TextareaType;
+use Symfony\Component\Form\Extension\Core\Type\TextType;
+use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\OptionsResolver\OptionsResolver;
+
+class WishType extends AbstractType
+{
+    public function buildForm(FormBuilderInterface $builder, array $options): void
+    {
+        $builder
+            ->add('title', TextType::class, [
+                'label' => 'Title'
+            ])
+            ->add('description', TextareaType::class, [
+                'required'=>false
+            ])
+            ->add('author')
+            ->add('isPublished', ChoiceType::class, [
+                'choices'=>[
+                    'True'=>'True',
+                    'False'=>'False'
+                ],
+                'multiple'=>false
+            ])
+            ->add('dateCreated', DateType::class,[
+                'html5'=>true,
+                'widget'=>'single_text'
+            ])
+        ;
+    }
+
+    public function configureOptions(OptionsResolver $resolver): void
+    {
+        $resolver->setDefaults([
+            'data_class' => Wish::class,
+        ]);
+    }
+}
Index: src/Repository/WishRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Repository/WishRepository.php b/src/Repository/WishRepository.php
new file mode 100644
--- /dev/null	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
+++ b/src/Repository/WishRepository.php	(revision a40fa3bd0b8410e119eabb3eb2a1f3f9f9dbf156)
@@ -0,0 +1,66 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\Wish;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<Wish>
+ *
+ * @method Wish|null find($id, $lockMode = null, $lockVersion = null)
+ * @method Wish|null findOneBy(array $criteria, array $orderBy = null)
+ * @method Wish[]    findAll()
+ * @method Wish[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class WishRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, Wish::class);
+    }
+
+    public function add(Wish $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->persist($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    public function remove(Wish $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->remove($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+//    /**
+//     * @return Wish[] Returns an array of Wish objects
+//     */
+//    public function findByExampleField($value): array
+//    {
+//        return $this->createQueryBuilder('w')
+//            ->andWhere('w.exampleField = :val')
+//            ->setParameter('val', $value)
+//            ->orderBy('w.id', 'ASC')
+//            ->setMaxResults(10)
+//            ->getQuery()
+//            ->getResult()
+//        ;
+//    }
+
+//    public function findOneBySomeField($value): ?Wish
+//    {
+//        return $this->createQueryBuilder('w')
+//            ->andWhere('w.exampleField = :val')
+//            ->setParameter('val', $value)
+//            ->getQuery()
+//            ->getOneOrNullResult()
+//        ;
+//    }
+}
